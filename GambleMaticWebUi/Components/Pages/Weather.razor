@page "/weather"
@using GambleMaticCommLib.DataModels
@using GambleMaticWebUi.Data.ViewModels
@inject ApiCommunicatorService ApiCommunicatorService
@rendermode InteractiveServer
@attribute [StreamRendering]


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else if (_errorMessage != null)
{
    <p> @_errorMessage</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    
    <button class="btn btn-primary" @onclick="RefreshWeatherForecasts">Refresh forecast</button>
}

@code {
    private WeatherForecastViewModel[]? forecasts;
    private ApiResult<WeatherForecastDto> forecastResults = null;
    private MarkupString? _errorMessage = null;



    protected override async Task OnInitializedAsync()
    {
         await RefreshWeatherForecasts();
    }

    private async Task RefreshWeatherForecasts()
    {
        
        forecastResults = await ApiCommunicatorService.WeatherForecastProvider.GetForecasts();

        if (forecastResults.Failed)
        {
            _errorMessage = new MarkupString($"Error with getting weather forecsts.<br />Error: {forecastResults}");
            return;
        }
        

        //Initialize the forecasts array with size 0
        forecasts = Array.Empty<WeatherForecastViewModel>();
        List<WeatherForecastViewModel> forecastsList = new List<WeatherForecastViewModel>();
        foreach (var dto in forecastResults.Payload)
        {
            WeatherForecastViewModel forecast = new WeatherForecastViewModel(dto);
            forecastsList.Add(forecast);
        }

        forecasts = forecastsList.ToArray();
    
    }



}
